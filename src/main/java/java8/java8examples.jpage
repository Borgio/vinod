// static methods in Interface
String producer = java8.Vehicle.producer(); 
// The static producer() method is available only through and inside of an interface. It can’t be overridden by an implementing class.
System.out.println(producer);

// Default Methods in Interface

//Default methods are accessible through the instance of the implementing class and can be overridden.

java8.Vehicle vehicle = new java8.VehicleImpl();
String overview = vehicle.getOverview();
System.out.println(overview);

// Method References
// 1. Reference to a Static Method
// syntax: ContainingClass::methodName. 
boolean isReal = list.stream().anyMatch(u -> User.isRealUser(u));
boolean isReal = list.stream().anyMatch(User::isRealUser);
// 2. Reference to an Instance Method
// syntax: containingInstance::methodName
User user = new User();
boolean isLegalName = list.stream().anyMatch(user::isLegalName);
// 3. Reference to an Instance Method of an Object of a Particular Type
// syntax: ContainingType::methodName
long count = list.stream().filter(String::isEmpty).count();
// 4. Reference to a Constructor
// syntax: ClassName::new
Stream<User> stream = list.stream().map(User::new);

// Optional<T>
// Before Java 8 developers had to carefully validate values they referred to, because of a possibility of throwing the NullPointerException (NPE). All these checks demanded a pretty annoying and error-prone boilerplate code.

// Java 8 Optional<T> class can help to handle situations where there is a possibility of getting the NPE. It works as a container for the object of type T. It can return a value of this object if this value is not a null. When the value inside this container is null it allows doing some predefined actions instead of throwing NPE.

// 1. Creation of the Optional<T>
Optional<String> optional = Optional.empty(); // Returns an empty Optional.

String str = "value";
Optional<String> optional = Optional.of(str); // Returns an Optional which contains a non-null value.

Optional<String> optional = Optional.ofNullable(getString()); //Will return an Optional with a specific value or an empty Optional if the parameter is null.

// 2. Optional<T> usage
// With pre-Java 8’s code 
List<String> list = getList();
List<String> listOpt = list != null ? list : new ArrayList<>();
//With Java 8 the same functionality can be achieved with a much shorter code:
List<String> listOpt = getList().orElseGet(() -> new ArrayList<>());

// There is even more boilerplate code example
User user = getUser();
if (user != null) {
    Address address = user.getAddress();
    if (address != null) {
        String street = address.getStreet();
        if (street != null) {
            return street;
        }
    }
}
return "not specified";

// This can be simplified with Optional:
Optional<User> user = Optional.ofNullable(getUser());
String result = user
  .map(User::getAddress)
  .map(Address::getStreet)
  .orElse("not specified");

// Imagine that our getters return Optional<T>. So, we should use the flatMap() method instead of the map():
Optional<OptionalUser> optionalUser = Optional.ofNullable(getOptionalUser());
String result = optionalUser
  .flatMap(OptionalUser::getAddress)
  .flatMap(OptionalAddress::getStreet)
  .orElse("not specified");

// Another use case of Optional is changing NPE with another exception. 
String value = null;
String result = "";
try {
    result = value.toUpperCase();
} catch (NullPointerException exception) {
    throw new CustomException();
}

// And what if we use Optional<String>? The answer is more readable and simpler:
String value = null;
Optional<String> valueOpt = Optional.ofNullable(value);
String result = valueOpt.orElseThrow(CustomException::new).toUpperCase();

